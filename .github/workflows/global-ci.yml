name: Global CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Detect which services have changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      earthquake-monitor: ${{ steps.changes.outputs.earthquake-monitor }}
      global-config: ${{ steps.changes.outputs.global-config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            earthquake-monitor:
              - 'earthquake-monitor/**'
            global-config:
              - '.github/**'
              - '.pre-commit-config.yaml'
              - 'README.md'

  # Global quality gates - always run
  quality-gates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python for pre-commit
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run global pre-commit hooks
        run: pre-commit run --all-files

  # Python services CI
  python-services:
    needs: [detect-changes, quality-gates]
    if: needs.detect-changes.outputs.earthquake-monitor == 'true' || needs.detect-changes.outputs.global-config == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [earthquake-monitor]
        python-version: ['3.11']

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test databases
        working-directory: ${{ matrix.service }}
        run: |
          createdb -h localhost -U postgres earthquake_monitor_test
        env:
          PGPASSWORD: password

      - name: Run unit tests (mocked dependencies)
        working-directory: ${{ matrix.service }}
        run: python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          REPOSITORY_TYPE: mock
          JWT_SECRET_KEY: test-secret-key-for-ci
          JWT_ALGORITHM: HS256
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30

      - name: Run integration tests (mock repository)
        working-directory: ${{ matrix.service }}
        run: python -m pytest tests/integration/ -v -k "not test_earthquake_api_with_db"
        env:
          REPOSITORY_TYPE: mock
          JWT_SECRET_KEY: test-secret-key-for-ci
          JWT_ALGORITHM: HS256
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30

      - name: Run database integration tests
        working-directory: ${{ matrix.service }}
        run: |
          # Debug: Show current directory and files
          pwd
          ls -la alembic_test.ini
          # Run Alembic migrations on test database
          alembic -c alembic_test.ini upgrade head
          # Run database integration tests
          python -m pytest tests/integration/test_earthquake_api_with_db.py -v
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/earthquake_monitor_test
          REPOSITORY_TYPE: postgresql
          JWT_SECRET_KEY: test-secret-key-for-ci
          JWT_ALGORITHM: HS256
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
          PGPASSWORD: password

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage


  # Docker build verification
  docker-build:
    needs: [detect-changes, quality-gates]
    if: (needs.detect-changes.outputs.earthquake-monitor == 'true' || needs.detect-changes.outputs.global-config == 'true') && needs.quality-gates.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [earthquake-monitor]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/docker/Dockerfile
          push: false
          tags: ${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [python-services, docker-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Add actual deployment logic here

      - name: Run integration tests
        run: |
          echo "ðŸ§ª Running integration tests..."
          # Add integration test logic here

      - name: Deploy to production
        if: success()
        run: |
          echo "ðŸŒŸ Deploying to production environment..."
          # Add production deployment logic here
